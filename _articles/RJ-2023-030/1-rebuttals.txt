Dear Dr. Catherine Hurley
Editor-in-Chief R Journal


We would like to thank you and the reviewers for our paper's effort and critical assessment. The suggestions and comments have been helpful and useful for improving our manuscript. 
Based on the reviews, we created a new version of the manuscript and highlighted in red all the changes we made. 
Besides, we added new metrics to our package and correspondingly, we updated the formulas in our manuscript (Table 1). The new metrics are IoU, SimSize, qLoc, RPsub, RPsuper, OI2, and Dice.


In the attached document, we address the reviewers’ concerns point by point.


Kind regards,
Rolf Simoes
On behalf of the co-authors.


> -- Reviewer 1 --


> ## General


> The package provides a catalogue of metrics that can be used to
> evaluate the results of a segmentation; the paper lists the metrics
> with their definition and literature references, and demonstrates
> their computation in a relevant use case, provided as examplez
> data in the package. The package uses classes for their computed
> segmentation metrics, and provides relevant methods for them. The
> processing takes place entirely on spatial vector data, and uses
> the more modern `sf` package for that.


This is an accurate summary.






> Although implementing this for spatial vector data is as generic
> as it can get, the motivation in the introduction mentions Earth
> Observation imagery as a use case. To make that promise true, it
> would be great if the paper could be extended by an example workflow
> where an image is segmented, and the resulting image is converted
> into vectors, and then analyzed with segmetric. With such a use case
> not only those who segment _images_ (whehter Earth observation or
> medical images) would be helped, but a number of issues including
> how to convert classified image pixels to spatial vector data would
> become clearer too. The issues of blocky polygon boundaries, and
> the question whether pixels that only touch in a point belong to
> the same polygon (segment) or not are not the topic of this paper,
> but in too much related from the perspective of practical workflows
> to be completely ignored here.


This question has two parts: 


The first refers to extending our manuscript by adding a workflow and detailing its steps. We included Figure 2, which presents a general workflow on segmentation and evaluation steps.


The second part refers to vector data and its properties, including the relation between raster and vector datasets. We understand that these are relevant points but we believe that these fall far beyond the scope of our manuscript, as these questions are not addressed within the segmetric package but rather within the packages and standards on which segmetric is based and which are described elsewhere. Segmetric depends on the sf package, which is an implementation of a standard issued by the Open Geospatial Consortium (https://www.ogc.org/standards/sfa), which was further formalized in ISO 19125 (https://www.iso.org/standard/40114.html). This standard defines a common way to store and access spatial data in the context of Geographic Information Systems. For example, by default, the sf package computes distances not as straight lines but as distances over a sphere based on the package s2 (https://cran.r-project.org/package=s2) and the library S2geometry (https://s2geometry.io/). In this way, segmetric conceptually follows ISO 19125, and questions regarding geometries, such as those posed by the reviewer, are resolved according to OGC’s simple features rules and we think they fall outside the scope of our manuscript. For example, the reviewer’s question regarding whether two segments that touch only in one point are or not the same polygon is resolved in the section 
Section 6.1.11.1 of the document OGC’s Implementation Standard for Geographic information - Simple feature access - Part 1: Common architecture; the short answer is no, the segments don’t belong to the same polygon. We added a sentence to clarify that in the beginning of subsection “Computing metrics”.










> ## Detailed comments


> The script contains the command:
> ```
> devtools::install_github("segmetric@dev")
> ```
> but that doesn't work as the github repo is not used; it also not
> clear whehter / why the github or dev version is needed.  Also the
> last plot command in the script has a wrong argumnet name (should
> be m500 I guess).


We updated both the script and our manuscript and fixed the problem regarding the call to the ‘install_github’ function. This issue was also solved in segmetric’s development branch in GitHub which is to be submitted to CRAN after the publication of our manuscript.
We also fixed the typo in the last plot command in our script as well as in our manuscript.






> The package on CRAN (DESCRIPTION) does not have a URL of the package;
> usually you point here to the github issues repo under "BugReports:",
> and to the github repo (and possibly pkgdown rendered manuals)
> under "URL:"


We fixed this issue by adding the BugReports and URL fields to segmetric’s DESCRIPTION file. Now, URL refers to the package's web page.






> ## Code


> The code looks solid, and uses modern tooling for documentation.
> Adding this paper as a vignette to the package would be a good idea.


This is an accurate summary. We will add our manuscript as a vignette once it is published.






> When loading data with e.g.
> ```
> data("seg200_sf", package = "segmetric")
> ```
> an `sf` object is loaded. When one wants to print this object, `sf`
> needs to be loaded first; if it is not loaded an incomprehensible
> print results. If the package would have `sf` in Depends: rather
> than `Imports:`, this would not be needed. I would recommend this,
> since users will want to use methods from `sf` to do something with
> these objects.
> By loading data this way, the package becomes vulnerable for the
> case where `sf` changes the way `sf` objects are represented,
> or upstream software (GDAL, PROJ) the way components like the CRS.
> See also https://www.tidyverse.org/blog/2022/09/playing-on-the-same-team-as-your-dependecy/ for an good
> introduction into this problem.  To make the package less vulnerable for this,
> do for instance what package `sf` also does: only provide vector data in
> e.g. GPKG files, and read them with `sf::read_sf()` rather than loading
> them with `data()`. This will always use the current constructors of
> package `sf`, rather than possibly outdated ones used at the time of
> writing your .rda files.


Following the reviewer’s advice, we moved sf to “depends” and now it is loaded with segmetric. We have decided to maintain segmetric’s data as RDA instead of GeoPackage format in order to follow R’s guides (“Writing R Extensions.” Available at: https://cran.r-project.org/doc/manuals/R-exts.html) to properly describe our data sources.






> The reference for `sf` is not Pebesma 2022 but:
> > citation("sf")
> > To cite package sf in publications, please use:
>   Pebesma, E., 2018. Simple Features for R: Standardized Support for
>   Spatial Vector Data. The R Journal 10 (1), 439-446,
>   https://doi.org/10.32614/RJ-2018-009


We fixed the corrected reference of the sf package.






> The way semetric implements %>% also seems overkill
> and vulnerable to potential changes in magrittr, I
> would recommend the way dplyr and sf also do this; see
> e.g. https://github.com/r-spatial/sf/blob/main/R/init.R#L15 and
> following lines. An alternative would be switching to R's native
> pipe, |>, but that would create a dependency on R >= 4.1 (I believe).


We changed how we import the pipe function in segmetric. We import it in the same way as the sf package.
 
> In the case of an R package, review the code with 'the eye of the expert'.
> That is, not a line-by-line analyses for correctness, but look for obvious
> pitfalls. In particular, you could look at the following.
> The `[` methods for segmetric objects seems to assume that i is
> always character; R users may also expect that an integer vector with
> the indices of elements to select, or a logical vector should work.


We agree with the reviewer suggestion and implemented support to integer and logical vectors.


> -- Reviewer 2 --
> ## General
> A short summary of the article's main contributions and shortcomings. Is the article important to the R the community? Is the approach sensible? Are technology and methods up-to-date?
> This study is essential for the accuracy and performance evaluation of spatial segmentation. 
> The developed R package provides a list of helpful indicators to evaluate the segmentation of both vector and raster spatial data. 
> The paper is of high quality in presenting the functions of the R package. 
> My only suggestion is to add a few "spatial indicators" to evaluate the segmentation performance.
> The detailed suggestion can be found below. 


This is an accurate summary.






> ## Detailed comments
> Point-wise comments (if applicable) and things to improve.
> (1) It is very good to include a series of indicators to evaluate the segmentation performance. However, as a spatial segmentation evaluation package, it is necessary to add a few "spatial indicators" to evaluate the segmentation results. From my experience, the spatial indicators for evaluating segmentation outcomes may include the following a few methods: Indicators for evaluating homogeneity within regions, heterogeneity between different regions, and comparison between regional and global data distributions (e.g., statistical distribution or spatial distribution). The equations of the methods can be found at DOI:10.1109/TITS.2020.3001193. 


Segmetric targets only supervised metrics, that is, metrics that require reference data to evaluate segmentation accuracy. We followed the scientific literature on supervised metrics. Including unsupervised metrics would require major changes to our package and it would be outside our package’s scope. So we decided to reject the reviewer’s suggestion regarding adding unsupervised metrics. To make our point clear, we updated our manuscript’s introduction to emphasize segmetric’s commitment to supervised segmentation metrics exclusively.






> (2) Page 7: Authors use "summary" function and Table 2 to show the outcomes using the package. Can you add a figure or table to show the direct outcomes from the "summary" function?


We added to our manuscript the R outcomes of the function calls as suggested. See pages number 7 and 8. These changes weren’t highlighted in red due to latex’s verbatim environment.






> ## Code
> In the case of an R package, review the code with 'the eye of the expert'.
> That is, not a line-by-line analyses for correctness, but look for obvious
> pitfalls. In particular, you could look at the following.
> 
> Usability:
> - Does the package have a clear and user-friendly workflow? Yes
> - Is the documentation well-written and user-focused? Yes


This is an accurate summary.






> Code:
> - Are there obvious edge cases that are missed? No
> - Could the functions presented be improved? Very good
> - Is the code well-organized and understandable? Yes


This is an accurate summary.






> -- Reviewer 3 --


> ## General
> 
> - A short summary of the article's main contributions and shortcomings. Is the article important to the R community? Is the approach sensible? Are technology and methods up-to-date?
> 
> The article written by the authors demonstrates segmentation methods and algorithms used to assess earth observation and remote sensing data (satellite imagery or shape files).
> In the article the authors explain the importance of segmentation algorithms and how their package (segmetric) can fill the current lack of tools in the remote sensing R community.
> The authors of the paper include in the 'segmetric' R package geometric supervised segmentation metrics based on numerous papers. Moreover, the authors allow R users to implement their own metric.
> The 'segmetric' R package includes also datasets (of different scales) and plot functions so that R users can compute the metrics (existing or customized) and then visualize the results.
> The 'segmetric' R package relies heavily on the 'sf' R package (simple features) which is one of the most important remote sensing R packages and will replace the 'sp' and 'gdal' R packages in the near future.
> Currently, it doesn't exist an R package with functionality similar to the 'segmetric' R package. If an R user intends to perform segmentation based on remote sensing data - as described in section 'segmetric in action' of the paper - then the results of the segmentation have to be verified with specific metrics and the segmetric R package includes all these evaluation metrics that R users can take advantage of.


This is an accurate summary.






> ## Detailed comments
> 
> Although the authors include a citation for the 'sf' R package they do not cite R packages mentioned in page 1, i.e. 'imageseg', 'expImage', 'SuperpixelImageSegmentation', 'openImageR', 'image.Otsu'.
> For instance the 'SuperpixelImageSegmentation' (https://cran.r-project.org/web/packages/SuperpixelImageSegmentation/citation.html) and the 'openImageR' (https://cran.r-project.org/web/packages/OpenImageR/citation.html) R packages have citations in their CRAN DESCRIPTION webpages.


We added the references to the packages suggested by the reviewer.






> - Point-wise comments (if applicable) and things to improve.
> In the 'filename.R' (and in the 'RJwrapper.pdf') file there is a typo in the last plot function which raises an error,
> 
> plot(metrics500,
>      type = "choropleth",
>      metric_id = c("QR", "IoU", "M", "OS2", "US2"),
>      break_style = "jenks",
>      plot_centroids = FALSE,
>      plot_axes = FALSE)
> 
> To fix this error the authors should replace the 'metrics500' with the 'm500' variable (in the plot() function).


We fixed this typo according to the reviewer’s suggestion.








> ## Code
> 
> In the case of an R package, review the code with 'the eye of the expert'. That is, not a line-by-line analyses for correctness, but look for obvious pitfalls. In particular, you could look at the following.
> 
> Usability:
> 
> - Does the package have a clear and user-friendly workflow?
> 
> The 'segmetric' R package is good structured and includes high level functions that allow R users to receive evaluation results without having to re-implement the code based on scientific papers.
> The authors use a workflow, which in my opinion is appropriate for any potential R user. This workflow is described in their 'RJwrapper.pdf' file and does the following:
> * first the data will be loaded (satellite imagery and their labels)
> * then the data will be visualized
> * finally the segmentation metrics will be computed based on the reference and segmented data


This is an accurate summary.






> - Is the documentation well-written and user-focused?
> 
> The documentation is well-written and R users can navigate to each one of the available functions using the index. I ran all available example sections and none of these raised an error.
> All functions in the documentation include the required fields such as Description, Usage, Arguments, Value, References and Examples.


This is an accurate summary.






> Code:
> 
> - Are there obvious edge cases that are missed?
> 
> The code of the 'segmetric' R package is tested using the 'testthat' R package (https://github.com/michellepicoli/segmetric/tree/main/tests/testthat). There are 2 files: the "segmetric_util.R" and the "test-db.R" files that include extensive test cases. The CRAN test results also do not show any issues (https://cran.r-project.org/web/checks/check_results_segmetric.html)


This is an accurate summary.






> - Could the functions presented be improved?
> 
> I viewed the code of the 'segmetric' R package in the corresponding Github repository (https://github.com/michellepicoli/segmetric) and there were numerous pull requests that used to update or fix the code. Although there are a few open issues (of minor importance) the update of the code shows the high engagement of the authors to improve the 'segmetric' R package. As a suggestion, I would advise the authors to parallelize the computation of the metrics so that potential R users can reduce the computation time especially in case of medium to big (in size) segmentation datasets.


The main computation cost of segmetric is the spatial operations. We are studying how to parallelize the spatial operations needed by segmetric. We have created an issue on package’s Github to track this improvement.






> - Is the code well-organized and understandable?
> 
> The existing code is well-organised and understandable. In my opinion, a missing part of the 'segmetric' R package is one or more Vignette(s) explaining similar worflows as in the 'RJwrapper.pdf' file. One might argue that the demos included in the 'segmetric' R package can be used instead, however when I attempted to use the demos I received the following errors:
> 
> # 'demo1'
> 
> require(segmetric)
> demo('demo1')
> 
> # I clicked the 'Enter' button to start the demo
> 
> > # unregister metric
> > sm_unreg_metric(metric_id = "IoU")
> Error in sm_unreg_metric(metric_id = "IoU") :
>   metric_id %in% .db_list() is not TRUE
> 
> # 'demo2'
> 
> require(segmetric)
> demo('demo2')
> 
> # I clicked the 'Enter' button to start the demo
> 
> > # open data and create a segmetric object
> > m100 <- sm_read(ref_sf = ref_sf, seg_sf = seg100_sf)
> Error in sm_read(ref_sf = ref_sf, seg_sf = seg100_sf) :
>   object 'seg100_sf' not found
> In addition: Warning message:
> In data("seg100_sf", package = "segmetric") :
>   data set ‘seg100_sf’ not found


We fixed the issues in our package’s demos.