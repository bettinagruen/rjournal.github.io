<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:distill="https://distill.pub/journal/" version="2.0">
  <channel>
    <title>The R Journal</title>
    <link>https://rjournal-distill.netlify.app/</link>
    <atom:link href="https://rjournal-distill.netlify.app/articles.xml" rel="self" type="application/rss+xml"/>
    <description>Articles published in the R Journal</description>
    <image>
      <title>The R Journal</title>
      <url>https://rjournal-distill.netlify.app/resources/favicon.ico</url>
      <link>https://rjournal-distill.netlify.app/</link>
    </image>
    <generator>Distill</generator>
    <lastBuildDate>Tue, 08 Jun 2021 00:00:00 +0000</lastBuildDate>
    <item>
      <title>Conversations in time: interactive visualisation to explore structured temporal data</title>
      <dc:creator>Earo Wang</dc:creator>
      <dc:creator>Dianne Cook</dc:creator>
      <link>https://rjournal-distill.netlify.app/articles/2020-171</link>
      <description>


&lt;h1 id="introduction"&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Temporal data typically arrives as a set of many observational units measured over time. Some variables may be categorical, containing a hierarchy in the collection process, that may be measurements taken in different geographic regions, or types of products sold by the one company. Exploring these multiple features can be daunting. Ensemble graphics &lt;span class="citation"&gt;(Unwin and Valero-Mora 2018)&lt;/span&gt; bundle multiple views of a data set together into one composite figure. These provide an effective approach for exploring and digesting many different aspects of temporal data. Adding interactivity to the ensemble can greatly enhance the exploration process.&lt;/p&gt;
&lt;p&gt;This paper describes new software, the tsibbletalk package, for exploring temporal data using linked views and time wrapping. We first provide some background to the approach based on setting up data structures and workflow, and give an overview of interactive systems in R. The section following introduces the tsibbletalk package. We explain the mechanism for constructing interactivity, to link between multiple hierarchical data objects and hence plots, and describe the set up for interactively slicing and dicing time to wrap a series on itself to investigate periodicities.&lt;/p&gt;
&lt;h1 id="background-tidy-temporal-data-and-workflow"&gt;Background: tidy temporal data and workflow&lt;/h1&gt;
&lt;p&gt;The tsibble package &lt;span class="citation"&gt;(Wang, Cook, and Hyndman 2020)&lt;/span&gt; introduced a unified temporal data structure, referred to as a &lt;code&gt;tsibble&lt;/code&gt;, to represent time series and longitudinal data in a tidy format &lt;span class="citation"&gt;(Wickham 2014)&lt;/span&gt;. A &lt;code&gt;tsibble&lt;/code&gt; extends the &lt;code&gt;data.frame&lt;/code&gt; and &lt;code&gt;tibble&lt;/code&gt; classes with the temporal contextual metadata: &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt;. The &lt;code&gt;index&lt;/code&gt; declares a data column that holds time-related indices. The &lt;code&gt;key&lt;/code&gt; identifies a collection of related series or panels observed over the &lt;code&gt;index&lt;/code&gt;-defined period, which can comprise multiple columns. An example of a &lt;code&gt;tsibble&lt;/code&gt; can be found in the monthly Australian retail trade turnover data (&lt;code&gt;aus_retail&lt;/code&gt;), available in the tsibbledata package &lt;span class="citation"&gt;(O’Hara-Wild, Hyndman, and Wang 2020c)&lt;/span&gt;, shown below. The &lt;code&gt;Month&lt;/code&gt; column holds year-months as the &lt;code&gt;index&lt;/code&gt;. &lt;code&gt;State&lt;/code&gt; and &lt;code&gt;Industry&lt;/code&gt; are the identifiers for these 152 series, which form the &lt;code&gt;key&lt;/code&gt;. Note that the column &lt;code&gt;Series ID&lt;/code&gt; could be an alternative option for setting up the &lt;code&gt;key&lt;/code&gt;, but &lt;code&gt;State&lt;/code&gt; and &lt;code&gt;Industry&lt;/code&gt; are more readable and informative. The &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; are “sticky” columns to a &lt;code&gt;tsibble&lt;/code&gt;, forming critical pieces for fluent downstream temporal data analysis.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#&amp;gt; # A tsibble: 64,532 x 5 [1M]
#&amp;gt; # Key:       State, Industry [152]
#&amp;gt;   State            Industry              `Series ID`    Month Turnover
#&amp;gt;   &amp;lt;chr&amp;gt;            &amp;lt;chr&amp;gt;                 &amp;lt;chr&amp;gt;          &amp;lt;mth&amp;gt;    &amp;lt;dbl&amp;gt;
#&amp;gt; 1 Australian Capi… Cafes, restaurants a… A3349849A   1982 Apr      4.4
#&amp;gt; 2 Australian Capi… Cafes, restaurants a… A3349849A   1982 May      3.4
#&amp;gt; 3 Australian Capi… Cafes, restaurants a… A3349849A   1982 Jun      3.6
#&amp;gt; 4 Australian Capi… Cafes, restaurants a… A3349849A   1982 Jul      4  
#&amp;gt; 5 Australian Capi… Cafes, restaurants a… A3349849A   1982 Aug      3.6
#&amp;gt; # … with 64,527 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the spirit of tidy data from the tidyverse &lt;span class="citation"&gt;(Wickham et al. 2019)&lt;/span&gt;, the &lt;strong&gt;tidyverts&lt;/strong&gt; suite features &lt;code&gt;tsibble&lt;/code&gt; as the foundational data structure, and helps to build a fluid and fluent pipeline for time series analysis. Besides tsibble, the feasts &lt;span class="citation"&gt;(O’Hara-Wild, Hyndman, and Wang 2020b)&lt;/span&gt; and fable &lt;span class="citation"&gt;(O’Hara-Wild, Hyndman, and Wang 2020a)&lt;/span&gt; packages fill the role of statistical analysis and forecasting in the &lt;strong&gt;tidyverts&lt;/strong&gt; ecosystem. During all the steps of a time series analysis, the series of interest, denoted by the &lt;code&gt;key&lt;/code&gt; variable, typically persist, through the trend modeling and also forecasting. We would typically want to examine the series across all of the keys.&lt;/p&gt;
&lt;p&gt;Figure  illustrates examining temporal data with many keys. The data has 152 series corresponding to different industries in retail data. The multiple series are displayed using an overlaid time series plot, along with a scatterplot of two variables (trend versus seasonal strength) from feature space, where each series is represented by a dot. The feature space is computed using the &lt;code&gt;features()&lt;/code&gt; function from feasts, which summarises the original data for each series using various statistical features. This function along with other &lt;strong&gt;tidyverts&lt;/strong&gt; functions is &lt;code&gt;tsibble&lt;/code&gt;-aware, and outputs a table in a reduced form where each row corresponds to a series, which can be graphically displayed as in Figure .&lt;/p&gt;
&lt;div class="figure" style="text-align: center"&gt;
&lt;img src="https://rjournal-distill.netlify.app//articles/2020-171/figure/highlight-retail-1.png" alt="Plots for the \code{aus\_retail} data, with the series of strongest seasonal strength highlighted. (a) An overlaid time series plot. (b) A scatter plot drawn from their time series features, where each dot represents a time series from (a)." width=".49\linewidth" /&gt;&lt;img src="https://rjournal-distill.netlify.app//articles/2020-171/figure/highlight-retail-2.png" alt="Plots for the \code{aus\_retail} data, with the series of strongest seasonal strength highlighted. (a) An overlaid time series plot. (b) A scatter plot drawn from their time series features, where each dot represents a time series from (a)." width=".49\linewidth" /&gt;
&lt;p class="caption"&gt;
(#fig:highlight-retail)Plots for the  data, with the series of strongest seasonal strength highlighted. (a) An overlaid time series plot. (b) A scatter plot drawn from their time series features, where each dot represents a time series from (a).
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Figure  has also been highlighted to focus on the one series with the strongest seasonality. To create this highlighting, one needs to first filter the interesting series from the features table, and join back to the original &lt;code&gt;tsibble&lt;/code&gt; in order to examine its trend in relation to others. This procedure can soon grow cumbersome if many series are to be explored. It illustrates a need to query interesting series on the fly. Although these two plots are static, we can consider them as linked views because the common &lt;code&gt;key&lt;/code&gt; variables link between the two data tables producing the two plots. This motivates the work in this package, described in this paper, to enable interactivity of &lt;code&gt;tsibble&lt;/code&gt; and &lt;code&gt;tsibble&lt;/code&gt;-derived objects for rapid exploratory data analysis.&lt;/p&gt;
&lt;h1 id="overview-of-interactivity"&gt;Overview of interactivity&lt;/h1&gt;
&lt;p&gt;There is a long history of interactive data visualisation research and corresponding systems. Within R, the systems can be roughly divided into systems utilising web technology and those that don’t.&lt;/p&gt;
&lt;p&gt;R shiny &lt;span class="citation"&gt;(Chang et al. 2020)&lt;/span&gt; and htmlwidgets &lt;span class="citation"&gt;(Vaidyanathan et al. 2019)&lt;/span&gt; provide infrastructure connecting R with HTML elements and JavaScript that support the interactivity. The htmlwidgets package makes it possible to embed JavaScript libraries into R so that users are able to write only R code to generate web-based plots. Many JavaScript charting libraries have been ported to R as HTML widgets, including plotly &lt;span class="citation"&gt;(Sievert 2020)&lt;/span&gt;, rbokeh &lt;span class="citation"&gt;(Hafen and Continuum Analytics, Inc. 2020)&lt;/span&gt;, and leaflet &lt;span class="citation"&gt;(J. Cheng, Karambelkar, and Xie 2019)&lt;/span&gt; for maps. Interactions between different widgets can be achieved with shiny or crosstalk &lt;span class="citation"&gt;(J. Cheng 2020)&lt;/span&gt;. The crosstalk extends htmlwidgets with shared R6 instances to support linked brushing and filtering across widgets, without relying on shiny.&lt;/p&gt;
&lt;p&gt;Systems without the web technology include grDevices, loon &lt;span class="citation"&gt;(Waddell and Oldford 2020)&lt;/span&gt;, based on Tcl/Tk, and  &lt;span class="citation"&gt;(Xie, Hofmann, and Cheng 2014)&lt;/span&gt; based on Qt. They offer a wide array of pre-defined interactions, such as selecting and zooming, to manipulate plots via mouse action, keyboard strokes, and menus. The  package &lt;span class="citation"&gt;(X. Cheng, Cook, and Hofmann 2016)&lt;/span&gt; is an add-on to , which provides specialised interactions for temporal data, such as wrapping and mirroring.&lt;/p&gt;
&lt;p&gt;The techniques implemented in work described in this paper utilise web technology, including crosstalk, plotly, and R shiny.&lt;/p&gt;
&lt;h1 id="using-a-shared-temporal-data-object-for-interactivity"&gt;Using a shared temporal data object for interactivity&lt;/h1&gt;
&lt;p&gt;The tsibbletalk package introduces a shared tsibble instance built on a &lt;code&gt;tsibble&lt;/code&gt;. This allows for seamless communication between different plots of temporal data. The &lt;code&gt;as_shared_tsibble()&lt;/code&gt; function turns a &lt;code&gt;tsibble&lt;/code&gt; into a shared instance, &lt;code&gt;SharedTsibbleData&lt;/code&gt;, which is a subclass of &lt;code&gt;SharedData&lt;/code&gt; from crosstalk. This is an R6 object driving data transmission across multiple views, due to its mutable and lightweight properties. The tsibbletalk package aims to streamline interactive exploration of temporal data, with the focus of temporal elements and structured linking.&lt;/p&gt;
&lt;h2 id="linking-between-plots"&gt;Linking between plots&lt;/h2&gt;
&lt;p&gt;As opposed to one-to-one linking, tsibbletalk defaults to categorical variable linking where selecting one or more observations in one category will broadcast to all other observations in this category. That is, linking is by key variables: within the time series plot, click on any data point, and whole line will be highlighted in response. The &lt;code&gt;as_shared_tsibble()&lt;/code&gt; uses &lt;code&gt;tsibble&lt;/code&gt;’s &lt;code&gt;key&lt;/code&gt; variables to achieve these types of linking.&lt;/p&gt;
&lt;p&gt;The approach can also accommodate temporal data of nesting and crossing structures. These time series are referred to as hierarchical and grouped time series in the literature &lt;span class="citation"&gt;(Hyndman and Athanasopoulos 2017)&lt;/span&gt;. The &lt;code&gt;aus_retail&lt;/code&gt; above is an example of grouped time series. Each series in the data corresponds to all possible combinations of the &lt;code&gt;State&lt;/code&gt; and &lt;code&gt;Industry&lt;/code&gt; variables, which means they are intrinsically crossed with each other. When one key variable is nested within another, such as regional areas within a state, this is considered to be a hierarchical structure.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;spec&lt;/code&gt; argument in &lt;code&gt;as_shared_tsibble()&lt;/code&gt; provides a means to construct hybrid linking, that incorporates hierarchical and categorical linking. A symbolic formula can be passed to the &lt;code&gt;spec&lt;/code&gt; argument, to define the crossing and/or nesting relationships among the key variables. Adopting &lt;span class="citation"&gt;Wilkinson and Rogers (1973)&lt;/span&gt;’s notation for factorial models, the &lt;code&gt;spec&lt;/code&gt; follows the &lt;code&gt;/&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; operator conventions to declare nesting and crossing variables, respectively. The &lt;code&gt;spec&lt;/code&gt; for the &lt;code&gt;aus_retail&lt;/code&gt; data is therefore specified as &lt;code&gt;State * Industry&lt;/code&gt; or &lt;code&gt;Industry * State&lt;/code&gt;, which is the default for the presence of multiple &lt;code&gt;key&lt;/code&gt; variables. If there is a hierarchy in the data, using &lt;code&gt;/&lt;/code&gt; is required to indicate the parent-child relation, for a strictly one directional &lt;code&gt;parent/child&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To illustrate nesting and crossing we use the &lt;code&gt;tourism_monthly&lt;/code&gt; dataset &lt;span class="citation"&gt;(Tourism Research Australia 2020)&lt;/span&gt; packaged in tsibbletalk. It contains monthly domestic overnight trips across Australia. The &lt;code&gt;key&lt;/code&gt; is comprised of three identifying variables: &lt;code&gt;State&lt;/code&gt;, &lt;code&gt;Region&lt;/code&gt;, and &lt;code&gt;Purpose&lt;/code&gt; (of trip), in particular &lt;code&gt;State&lt;/code&gt; nesting of &lt;code&gt;Region&lt;/code&gt;, together crossed with &lt;code&gt;Purpose&lt;/code&gt;. This specification can be translated as follows:&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(tsibble)
library(tsibbletalk)
tourism_shared &amp;lt;- tourism_monthly %&amp;gt;%
  as_shared_tsibble(spec = (State / Region) * Purpose)&lt;/code&gt;&lt;/pre&gt;
&lt;div class="figure" style="text-align: center"&gt;
&lt;img src="https://rjournal-distill.netlify.app//articles/2020-171/img/tourism-linking.png" alt="Snapshot of exploring an ensemble of linked plots of the Australian tourism data, built on a \code{tourism\_shared} object. It also illustrates persistent linked brushing to compare two groups." width="100%" /&gt;
&lt;p class="caption"&gt;
(#fig:tourism-linking-fig)Snapshot of exploring an ensemble of linked plots of the Australian tourism data, built on a  object. It also illustrates persistent linked brushing to compare two groups.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;There is a three-level hierarchy: the root node is implicitly Australia, and geographically disaggregated to states and lower-level tourism regions. A new handy function &lt;code&gt;plotly_key_tree()&lt;/code&gt; has been implemented to help explore the hierarchy. It interprets hierarchies in the shared tsibble’s &lt;code&gt;spec&lt;/code&gt; as a tree view, built with plotly. The following code line produces the linked tree diagram (left panel of Figure ). The visual for the tree hierarchy detangles a group of related series and provides a bird’s eye view of the data organisation.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;p_l &amp;lt;- plotly_key_tree(tourism_shared, height = 1100, width = 800)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tree plot provides the graphics skeleton, upon which the rest of data plots can be attached. In this example, small multiples of line plots are placed at the top right of Figure  to explore the temporal trend across regions, by trip purpose. The shared tsibble data can be directly piped into ggplot2 code to create this.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(ggplot2)
p_tr &amp;lt;- tourism_shared %&amp;gt;%
  ggplot(aes(x = Month, y = Trips)) +
  geom_line(aes(group = Region), alpha = .5, size = .4) +
  facet_wrap(~ Purpose, scales = &amp;quot;free_y&amp;quot;) +
  scale_x_yearmonth(date_breaks = &amp;quot;5 years&amp;quot;, date_labels = &amp;quot;%Y&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;These line plots are heavily overplotted. To tease apart structure in the multiple time series, the &lt;code&gt;features()&lt;/code&gt; function computes interesting characteristics, including the measures of trend and seasonality. These are displayed in the scatterplot at bottom right, where one dot represents one series.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(feasts)
tourism_feat &amp;lt;- tourism_shared %&amp;gt;%
  features(Trips, feat_stl)
p_br &amp;lt;- tourism_feat %&amp;gt;%
  ggplot(aes(x = trend_strength, y = seasonal_strength_year)) +
  geom_point(aes(group = Region), alpha = .8, size = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is one final step, to compose the three plots into an ensemble of coordinated views for exploration, shown in Figure . (This is the interactive realisation of Figure ). &lt;!-- Routine functions bring about new interaction with temporal data on the client side.--&gt;&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(plotly)
subplot(p_l,
  subplot(
    ggplotly(p_tr, tooltip = &amp;quot;Region&amp;quot;, width = 1100),
    ggplotly(p_br, tooltip = &amp;quot;Region&amp;quot;, width = 1100),
    nrows = 2),
  widths = c(.4, .6)) %&amp;gt;%
  plotly::highlight(dynamic = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since all plots are created from one shared tsibble data source, they are self-linking views. Nodes, lines, and points are hoverable and clickable. Given the &lt;code&gt;spec&lt;/code&gt;, clicking either one element in any plot highlights all points that match the &lt;code&gt;Region&lt;/code&gt; category, that is, categorical linking. Figure  is a static view of an interactive exploration. The steps in getting to this point were:&lt;/p&gt;
&lt;ol style="list-style-type: decimal"&gt;
&lt;li&gt;A branch of the tree corresponding to Western Australia was first selected. (The names of the regions are a little odd, which is a quirk of the data set, but all four areas, Australia’s South West, …., correspond to tourist destinations in Western Australia. Hovering over the node on the branch brings up the state name.) This generated the response in the line plots and the scatterplot that coloured corresponding time series and points as blue.&lt;/li&gt;
&lt;li&gt;To enable persistent selection, in oder to compare regions or states, “Shift” and click on the tree was done, after switching the colour to red. This generated the response that points and time series corresponding to Sydney were highlighted in red.&lt;/li&gt;
&lt;li&gt;Hovering over the points brings up the label for Sydney.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The domestic tourism sees Sydney as one of the most popular destinations in realm of business and friends visiting over the years. Despite the relatively weaker performance in Western Australia, Australia’s North West region sees a strongest upward trend in Business, bypassing Sydney in some years.&lt;/p&gt;
&lt;p&gt;In summary, shared tsibble data nicely bridges between the crosstalk and &lt;strong&gt;tidyverts&lt;/strong&gt; ecosystems for temporal data using the common “key.” The &lt;code&gt;as_shared_tsibble()&lt;/code&gt; provides a symbolic user interface for effortless construction of a hybrid of hierarchical and categorical linking between plots. The &lt;code&gt;plotly_key_tree()&lt;/code&gt; function, in turn, decodes the hierarchical specification to plot a tree for data overview and navigation, when accompanied by more detailed plots.&lt;/p&gt;
&lt;h2 id="slicing-and-dicing-time"&gt;Slicing and dicing time&lt;/h2&gt;
&lt;p&gt;An important aspect of temporal data is the time context. Time has cyclical structure, that may correspond to seasonal patterns to be discovered. The &lt;code&gt;index&lt;/code&gt; component of the (shared) tsibble data forms the basis for exploring seasonality. To investigate for periodic or aperiodic patterns, series should be wrapped on themselves, where the index is broken into temporal components like quarter or day. We shall explore this with pedestrian traffic in Melbourne, Australia.&lt;/p&gt;
&lt;div class="figure" style="text-align: center"&gt;
&lt;img src="https://rjournal-distill.netlify.app//articles/2020-171/img/wrap-0.png" alt="Snapshots wrapping after slicing the \code{pedestrian20} data at different intervals, (a) none, (b) daily and (c) weekly. This type of interaction is made possible with Shiny elements." width="100%" /&gt;&lt;img src="https://rjournal-distill.netlify.app//articles/2020-171/img/wrap-1.png" alt="Snapshots wrapping after slicing the \code{pedestrian20} data at different intervals, (a) none, (b) daily and (c) weekly. This type of interaction is made possible with Shiny elements." width="100%" /&gt;&lt;img src="https://rjournal-distill.netlify.app//articles/2020-171/img/wrap-7.png" alt="Snapshots wrapping after slicing the \code{pedestrian20} data at different intervals, (a) none, (b) daily and (c) weekly. This type of interaction is made possible with Shiny elements." width="100%" /&gt;
&lt;p class="caption"&gt;
(#fig:wrap-ped)Snapshots wrapping after slicing the  data at different intervals, (a) none, (b) daily and (c) weekly. This type of interaction is made possible with Shiny elements.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The city of Melbourne has sensors installed at various locations, to record hourly counts of pedestrians, in order to capture daily rhythms of the downtown &lt;span class="citation"&gt;(City of Melbourne 2020)&lt;/span&gt;. Figure  shows the first five months of 2020 foot traffic at four different locations, for three different time slices, daily, weekly and full five months. Plot  shows hourly counts from January to May on an absolute time line, facetted by locations. The stage 3 COVID-19 lockdown, on March 16, is marked by a change of colour. (The pre-lockdown period is coloured with dark green and lockdown with orange.) We can see a significant decline in foot traffic at all four locations. QV Market is less affected probably because this is a major produce market, an essential service that continued to operate. Bourke St, a major shopping center, sees a gradual uptick in the last weeks of the period indicating that people were getting back into the shops.&lt;/p&gt;
&lt;p&gt;Figure  and  show slicing and wrapping of the series into daily and weekly sections, respectively. Multiple seasonalities pop out. There tends to be a daily pattern, especially visible at the main train station, Southern Cross Station. There is also a weekday vs weekend pattern, also most visible at Southern Cross Station. These seasonal patterns are still present during the lockdown, but the magnitude is greatly reduced. Numbers are also down at the produce market and the shopping center. Birrarung Marr is the most affected. This is the location of special events, and it is clear that these have completely disappeared during lockdown.&lt;/p&gt;
&lt;p&gt;The wrapping procedure involves slicing the time index into seasonal periods of interest, and the result is diced time. For example, hourly pedestrian data can be decomposed into 24-hour blocks, which then overlays the counts for all respective days, as done in plot . For exploration, this slice position should be controlled interactively, so that many different slices can be examined rapidly. This can be achieved using shiny, with the functions provided in the tsibbletalk.&lt;/p&gt;
&lt;p&gt;This shiny module, decoupled to &lt;code&gt;tsibbleWrapUI()&lt;/code&gt; and &lt;code&gt;tsibbleWrapServer()&lt;/code&gt;, presents a clean interface and forms a reusable component that could be embedded in any shiny application. In general, a shiny module provides a vehicle for modularising shiny applications, relevant for both users and developers. As with all shiny modules, the first argument in both functions in tsibbletalk requires a user-supplied id string that must be unique. The UI function &lt;code&gt;tsibbleWrapUI()&lt;/code&gt; simply shows a slider that animates or controls the number of periods to be diced. The workhorse is the server function &lt;code&gt;tsibbleWrapServer()&lt;/code&gt;, encapsulating the algorithm that transforms data and sends messages to update the plot accordingly. The &lt;code&gt;plot&lt;/code&gt; argument expects a &lt;code&gt;ggplot&lt;/code&gt; or &lt;code&gt;plotly&lt;/code&gt; object, where one can plot data using either lines or other graphical elements (such as boxplots). As the function name suggests, a (shared) tsibble is needed to start the engine, so that the time &lt;code&gt;index&lt;/code&gt; can be retrieved for dissection. The &lt;code&gt;period&lt;/code&gt; option semantically takes a desired number of seasonal periods to be shifted, for example data shifted by “1 day,” “2 days,” or “1 week,” etc. In other words, the &lt;code&gt;period&lt;/code&gt; defines the grind level. For date-times (represented by &lt;code&gt;POSIXt&lt;/code&gt;), the granularity ranges from fine “day” to a much coarser “year.” The following code snippet generates Figure . The creation of the &lt;code&gt;pedestrian20&lt;/code&gt; data is available in supplementary R files.&lt;/p&gt;
&lt;pre class="r"&gt;&lt;code&gt;library(shiny)
p_line &amp;lt;- pedestrian20 %&amp;gt;%
  ggplot(aes(x = Date_Time, y = Count, colour = Lockdown)) +
  geom_line(size = .3) +
  facet_wrap(~ Sensor, scales = &amp;quot;free_y&amp;quot;) +
  labs(x = &amp;quot;Date Time&amp;quot;) +
  scale_colour_brewer(palette = &amp;quot;Dark2&amp;quot;) +
  theme(legend.position = &amp;quot;none&amp;quot;)

ui &amp;lt;- fluidPage(
  tsibbleWrapUI(&amp;quot;dice&amp;quot;)
)
server &amp;lt;- function(input, output, session) {
  tsibbleWrapServer(&amp;quot;dice&amp;quot;, ggplotly(p_line, height = 700), period = &amp;quot;1 day&amp;quot;)
}
shinyApp(ui, server)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Figure  corresponds to the initial state, with the slider incremented by 1-day units. The “play” button near the end of slider can automatically animate the slicing and dicing process, walking the viewer through all 24 hours of the 152 days. Alternatively, users can drag the slider to examine selected slices.&lt;/p&gt;
&lt;p&gt;In response to the slider input, the plot will be updated and loaded with newly transformed data. At its core, keeping the application as performant as possible is the top priority. Without completely redrawing the plot, the &lt;code&gt;plotlyProxy()&lt;/code&gt; react method is invoked internally for talking to shiny. The underlying tsibble data is being called back and processed in R. Only transformed data gets fed back to the shiny server, for updating with resetting the x-axis ranges and breaks. The other plot configurations, such as marks, y-axes, and layouts, are cached and used as is.&lt;/p&gt;
&lt;p&gt;The new shiny module exploits the temporal aspect for a tsibble object, available through the &lt;code&gt;index&lt;/code&gt; attribute. It allows users to slide through relative periods to digest seasonal behaviours, with nimble user experience.&lt;/p&gt;
&lt;h1 id="summary"&gt;Summary&lt;/h1&gt;
&lt;p&gt;At the heart of the tsibbletalk package is a blending of the best bits from tsibble, crosstalk, plotly, and shiny.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;as_shared_tsibble()&lt;/code&gt; turns a &lt;code&gt;tsibble&lt;/code&gt; object to a shared data class, with an option to express any nesting and crossing structures from the &lt;code&gt;key&lt;/code&gt; attribute. If nesting is found in the data, the &lt;code&gt;plotly_key_tree()&lt;/code&gt; creates an interactive hierarchical tree to help with data overview. This sets the stage for hierarchical and categorical linking between multiple views from one shared tsibble.&lt;/p&gt;
&lt;p&gt;A new shiny module, &lt;code&gt;tsibbleWrapUI()&lt;/code&gt; and &lt;code&gt;tsibbleWrapServer()&lt;/code&gt;, provides a lens for looking at temporal aspects of a &lt;code&gt;tsibble&lt;/code&gt;, in particular seasonal or cyclical variations. The slicing and dicing technique efficiently wrap time lines for user-defined plots. The &lt;code&gt;plotlyProxy()&lt;/code&gt; react method makes it possible to send wrapped data to the server and amend the plot straight way.&lt;/p&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id="refs" class="references csl-bib-body hanging-indent"&gt;
&lt;div id="ref-R-shiny" class="csl-entry"&gt;
Chang, Winston, Joe Cheng, JJ Allaire, Yihui Xie, and Jonathan McPherson. 2020. &lt;em&gt;Shiny: Web Application Framework for r&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=shiny"&gt;https://CRAN.R-project.org/package=shiny&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-crosstalk" class="csl-entry"&gt;
Cheng, Joe. 2020. &lt;em&gt;Crosstalk: Inter-Widget Interactivity for HTML Widgets&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=crosstalk"&gt;https://CRAN.R-project.org/package=crosstalk&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-leaflet" class="csl-entry"&gt;
Cheng, Joe, Bhaskar Karambelkar, and Yihui Xie. 2019. &lt;em&gt;Leaflet: Create Interactive Web Maps with the JavaScript ’Leaflet’ Library&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=leaflet"&gt;https://CRAN.R-project.org/package=leaflet&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-cheng_enabling_2016" class="csl-entry"&gt;
Cheng, Xiaoyue, Dianne Cook, and Heike Hofmann. 2016. &lt;span&gt;“Enabling Interactivity on Displays of Multivariate Time Series and Longitudinal Data.”&lt;/span&gt; &lt;em&gt;Journal of Computational and Graphical Statistics&lt;/em&gt; 25 (4): 1057–76. &lt;a href="https://www.tandfonline.com/doi/full/10.1080/10618600.2015.1105749"&gt;https://www.tandfonline.com/doi/full/10.1080/10618600.2015.1105749&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-ped" class="csl-entry"&gt;
City of Melbourne. 2020. &lt;em&gt;Pedestrian Volume in Melbourne&lt;/em&gt;. City of Melbourne, Australia. &lt;a href="http://www.pedestrian.melbourne.vic.gov.au"&gt;http://www.pedestrian.melbourne.vic.gov.au&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-rbokeh" class="csl-entry"&gt;
Hafen, Ryan, and Continuum Analytics, Inc. 2020. &lt;em&gt;Rbokeh: R Interface for Bokeh&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=rbokeh"&gt;https://CRAN.R-project.org/package=rbokeh&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-fpp" class="csl-entry"&gt;
Hyndman, Rob J, and George Athanasopoulos. 2017. &lt;em&gt;Forecasting: Principles and Practice&lt;/em&gt;. Melbourne, Australia: OTexts. &lt;a href="https://OTexts.org/fpp2"&gt;OTexts.org/fpp2&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-fable" class="csl-entry"&gt;
O’Hara-Wild, Mitchell, Rob Hyndman, and Earo Wang. 2020a. &lt;em&gt;Fable: Forecasting Models for Tidy Time Series&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=fable"&gt;https://CRAN.R-project.org/package=fable&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-feasts" class="csl-entry"&gt;
———. 2020b. &lt;em&gt;Feasts: Feature Extraction and Statistics for Time Series&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=feasts"&gt;https://CRAN.R-project.org/package=feasts&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-tsibbledata" class="csl-entry"&gt;
———. 2020c. &lt;em&gt;Tsibbledata: Diverse Datasets for ’Tsibble’&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=tsibbledata"&gt;https://CRAN.R-project.org/package=tsibbledata&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-plotly2020" class="csl-entry"&gt;
Sievert, Carson. 2020. &lt;em&gt;Interactive Web-Based Data Visualization with r, Plotly, and Shiny&lt;/em&gt;. Chapman; Hall/CRC. &lt;a href="https://plotly-r.com"&gt;https://plotly-r.com&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-tourism" class="csl-entry"&gt;
Tourism Research Australia. 2020. &lt;em&gt;Australian Domestic Overnight Trips&lt;/em&gt;. Tourism Research Australia, Australia. &lt;a href="https://www.tra.gov.au"&gt;https://www.tra.gov.au&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-unwin_ensemble_2018" class="csl-entry"&gt;
Unwin, Antony, and Pedro Valero-Mora. 2018. &lt;span&gt;“Ensemble &lt;span&gt;Graphics&lt;/span&gt;.”&lt;/span&gt; &lt;em&gt;Journal of Computational and Graphical Statistics&lt;/em&gt; 27 (1): 157–65. &lt;a href="https://www.tandfonline.com/doi/full/10.1080/10618600.2017.1383264"&gt;https://www.tandfonline.com/doi/full/10.1080/10618600.2017.1383264&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-htmlwidgets" class="csl-entry"&gt;
Vaidyanathan, Ramnath, Yihui Xie, JJ Allaire, Joe Cheng, and Kenton Russell. 2019. &lt;em&gt;Htmlwidgets: HTML Widgets for r&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=htmlwidgets"&gt;https://CRAN.R-project.org/package=htmlwidgets&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-R-loon" class="csl-entry"&gt;
Waddell, Adrian, and R. Wayne Oldford. 2020. &lt;em&gt;Loon: Interactive Statistical Data Visualization&lt;/em&gt;. &lt;a href="https://CRAN.R-project.org/package=loon"&gt;https://CRAN.R-project.org/package=loon&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-wang2020tsibble" class="csl-entry"&gt;
Wang, Earo, Dianne Cook, and Rob J Hyndman. 2020. &lt;span&gt;“A New Tidy Data Structure to Support Exploration and Modeling of Temporal Data.”&lt;/span&gt; &lt;em&gt;Journal of Computational and Graphical Statistics&lt;/em&gt; 29 (3): 466–78. &lt;a href="https://doi.org/10.1080/10618600.2019.1695624"&gt;https://doi.org/10.1080/10618600.2019.1695624&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-wickham2014tidy" class="csl-entry"&gt;
Wickham, Hadley. 2014. &lt;span&gt;“Tidy Data.”&lt;/span&gt; &lt;em&gt;Journal of Statistical Software&lt;/em&gt; 59 (10): 1–23.
&lt;/div&gt;
&lt;div id="ref-Wickham2019" class="csl-entry"&gt;
Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. &lt;span&gt;“Welcome to the Tidyverse.”&lt;/span&gt; &lt;em&gt;Journal of Open Source Software&lt;/em&gt; 4 (43): 1686. &lt;a href="https://doi.org/10.21105/joss.01686"&gt;https://doi.org/10.21105/joss.01686&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-Wilkinson1973" class="csl-entry"&gt;
Wilkinson, G. N., and C. E. Rogers. 1973. &lt;span&gt;“Symbolic Description of Factorial Models for Analysis of Variance.”&lt;/span&gt; &lt;em&gt;Journal of the Royal Statistical Society. Series C (Applied Statistics)&lt;/em&gt; 22 (3): 392–99. &lt;a href="http://www.jstor.org/stable/2346786"&gt;http://www.jstor.org/stable/2346786&lt;/a&gt;.
&lt;/div&gt;
&lt;div id="ref-xie_reactive_2014" class="csl-entry"&gt;
Xie, Yihui, Heike Hofmann, and Xiaoyue Cheng. 2014. &lt;span&gt;“Reactive Programming for Interactive Graphics.”&lt;/span&gt; &lt;em&gt;Statistical Science&lt;/em&gt; 29 (2): 201–13. &lt;a href="http://projecteuclid.org/euclid.ss/1408368571"&gt;http://projecteuclid.org/euclid.ss/1408368571&lt;/a&gt;.
&lt;/div&gt;
&lt;/div&gt;</description>
      <distill:md5>5f10c353af42a498a127adb0837963a1</distill:md5>
      <category>Graphics and Visualisation</category>
      <category>Time Series Analysis</category>
      <category>Web Technologies and Services</category>
      <guid>https://rjournal-distill.netlify.app/articles/2020-171</guid>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      <media:content url="https://rjournal-distill.netlify.app/articles/2020-171/distill-preview.png" medium="image" type="image/png" width="1248" height="1152"/>
    </item>
    <item>
      <title>spinifex: An R Package for Creating a Manual Tour of Low-dimensional Projections of Multivariate Data</title>
      <dc:creator>Nicholas Spyrison</dc:creator>
      <dc:creator>Dianne Cook</dc:creator>
      <link>https://rjournal-distill.netlify.app/articles/RJ-2020-027</link>
      <description>


&lt;style type="text/css"&gt;
d-title h1, d-title p, d-title figure {
  grid-column: page;
}
&lt;/style&gt;
&lt;div class="l-page"&gt;
&lt;p&gt;&lt;object data="RJ-2020-027.pdf" type="application/pdf" style="height:955px;width:100%"&gt; &lt;iframe src="RJ-2020-027.pdf"&gt;&lt;/iframe&gt; &lt;/object&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;pre class="r distill-force-highlighting-css"&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
      <distill:md5>745fcdc987dd6ceea16bf8f81b8e7f1f</distill:md5>
      <guid>https://rjournal-distill.netlify.app/articles/RJ-2020-027</guid>
      <pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
