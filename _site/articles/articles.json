[
  {
    "path": "articles/2020-171/",
    "title": "Conversations in time: interactive visualisation to explore structured temporal data",
    "description": "Temporal data often has a hierarchical structure, defined by categorical variables describing different levels, such as political regions or sales products. Nesting of categorical variables produces a hierarchical structure. The tsibbletalk package is developed to allow a user to interactively explore temporal data, relative to the nested or crossed structures. It can help to discover differences between category levels, and uncover interesting periodic or aperiodic slices. The package implements a shared `tsibble` object that allows for linked brushing between coordinated views, and a shiny module that aids in wrapping time lines for seasonal patterns. The tools are demonstrated using two data examples: domestic tourism in Australia and pedestrian traffic in Melbourne.",
    "author": [
      {
        "name": "Earo Wang",
        "url": {}
      },
      {
        "name": "Dianne Cook",
        "url": {}
      }
    ],
    "date": "2021-06-09",
    "categories": [
      "Graphics and Visualisation",
      "Time Series Analysis",
      "Web Technologies and Services"
    ],
    "contents": "\n\nContents\nIntroduction\nBackground: tidy temporal data and workflow\nOverview of interactivity\nUsing a shared temporal data object for interactivity\nLinking between plots\nSlicing and dicing time\n\nSummary\n\n\n\n\nIntroduction\nTemporal data typically arrives as a set of many observational units measured over time. Some variables may be categorical, containing a hierarchy in the collection process, that may be measurements taken in different geographic regions, or types of products sold by the one company. Exploring these multiple features can be daunting. Ensemble graphics (Unwin and Valero-Mora 2018) bundle multiple views of a data set together into one composite figure. These provide an effective approach for exploring and digesting many different aspects of temporal data. Adding interactivity to the ensemble can greatly enhance the exploration process.\nThis paper describes new software, the tsibbletalk package, for exploring temporal data using linked views and time wrapping. We first provide some background to the approach based on setting up data structures and workflow, and give an overview of interactive systems in R. The section following introduces the tsibbletalk package. We explain the mechanism for constructing interactivity, to link between multiple hierarchical data objects and hence plots, and describe the set up for interactively slicing and dicing time to wrap a series on itself to investigate periodicities.\nBackground: tidy temporal data and workflow\nThe tsibble package (Wang, Cook, and Hyndman 2020) introduced a unified temporal data structure, referred to as a tsibble, to represent time series and longitudinal data in a tidy format (Wickham 2014). A tsibble extends the data.frame and tibble classes with the temporal contextual metadata: index and key. The index declares a data column that holds time-related indices. The key identifies a collection of related series or panels observed over the index-defined period, which can comprise multiple columns. An example of a tsibble can be found in the monthly Australian retail trade turnover data (aus_retail), available in the tsibbledata package (O’Hara-Wild, Hyndman, and Wang 2020c), shown below. The Month column holds year-months as the index. State and Industry are the identifiers for these 152 series, which form the key. Note that the column Series ID could be an alternative option for setting up the key, but State and Industry are more readable and informative. The index and key are “sticky” columns to a tsibble, forming critical pieces for fluent downstream temporal data analysis.\n\n#> # A tsibble: 64,532 x 5 [1M]\n#> # Key:       State, Industry [152]\n#>   State            Industry              `Series ID`    Month Turnover\n#>   <chr>            <chr>                 <chr>          <mth>    <dbl>\n#> 1 Australian Capi… Cafes, restaurants a… A3349849A   1982 Apr      4.4\n#> 2 Australian Capi… Cafes, restaurants a… A3349849A   1982 May      3.4\n#> 3 Australian Capi… Cafes, restaurants a… A3349849A   1982 Jun      3.6\n#> 4 Australian Capi… Cafes, restaurants a… A3349849A   1982 Jul      4  \n#> 5 Australian Capi… Cafes, restaurants a… A3349849A   1982 Aug      3.6\n#> # … with 64,527 more rows\n\nIn the spirit of tidy data from the tidyverse (Wickham et al. 2019), the tidyverts suite features tsibble as the foundational data structure, and helps to build a fluid and fluent pipeline for time series analysis. Besides tsibble, the feasts (O’Hara-Wild, Hyndman, and Wang 2020b) and fable (O’Hara-Wild, Hyndman, and Wang 2020a) packages fill the role of statistical analysis and forecasting in the tidyverts ecosystem. During all the steps of a time series analysis, the series of interest, denoted by the key variable, typically persist, through the trend modeling and also forecasting. We would typically want to examine the series across all of the keys.\nFigure  illustrates examining temporal data with many keys. The data has 152 series corresponding to different industries in retail data. The multiple series are displayed using an overlaid time series plot, along with a scatterplot of two variables (trend versus seasonal strength) from feature space, where each series is represented by a dot. The feature space is computed using the features() function from feasts, which summarises the original data for each series using various statistical features. This function along with other tidyverts functions is tsibble-aware, and outputs a table in a reduced form where each row corresponds to a series, which can be graphically displayed as in Figure .\n\n\n\nFigure 1: Plots for the  data, with the series of strongest seasonal strength highlighted. (a) An overlaid time series plot. (b) A scatter plot drawn from their time series features, where each dot represents a time series from (a).\n\n\n\nFigure  has also been highlighted to focus on the one series with the strongest seasonality. To create this highlighting, one needs to first filter the interesting series from the features table, and join back to the original tsibble in order to examine its trend in relation to others. This procedure can soon grow cumbersome if many series are to be explored. It illustrates a need to query interesting series on the fly. Although these two plots are static, we can consider them as linked views because the common key variables link between the two data tables producing the two plots. This motivates the work in this package, described in this paper, to enable interactivity of tsibble and tsibble-derived objects for rapid exploratory data analysis.\nOverview of interactivity\nThere is a long history of interactive data visualisation research and corresponding systems. Within R, the systems can be roughly divided into systems utilising web technology and those that don’t.\nR shiny (Chang et al. 2020) and htmlwidgets (Vaidyanathan et al. 2019) provide infrastructure connecting R with HTML elements and JavaScript that support the interactivity. The htmlwidgets package makes it possible to embed JavaScript libraries into R so that users are able to write only R code to generate web-based plots. Many JavaScript charting libraries have been ported to R as HTML widgets, including plotly (Sievert 2020), rbokeh (Hafen and Continuum Analytics, Inc. 2020), and leaflet (J. Cheng, Karambelkar, and Xie 2019) for maps. Interactions between different widgets can be achieved with shiny or crosstalk (J. Cheng 2020). The crosstalk extends htmlwidgets with shared R6 instances to support linked brushing and filtering across widgets, without relying on shiny.\nSystems without the web technology include grDevices, loon (Waddell and Oldford 2020), based on Tcl/Tk, and  (Xie, Hofmann, and Cheng 2014) based on Qt. They offer a wide array of pre-defined interactions, such as selecting and zooming, to manipulate plots via mouse action, keyboard strokes, and menus. The  package (X. Cheng, Cook, and Hofmann 2016) is an add-on to , which provides specialised interactions for temporal data, such as wrapping and mirroring.\nThe techniques implemented in work described in this paper utilise web technology, including crosstalk, plotly, and R shiny.\nUsing a shared temporal data object for interactivity\nThe tsibbletalk package introduces a shared tsibble instance built on a tsibble. This allows for seamless communication between different plots of temporal data. The as_shared_tsibble() function turns a tsibble into a shared instance, SharedTsibbleData, which is a subclass of SharedData from crosstalk. This is an R6 object driving data transmission across multiple views, due to its mutable and lightweight properties. The tsibbletalk package aims to streamline interactive exploration of temporal data, with the focus of temporal elements and structured linking.\nLinking between plots\nAs opposed to one-to-one linking, tsibbletalk defaults to categorical variable linking where selecting one or more observations in one category will broadcast to all other observations in this category. That is, linking is by key variables: within the time series plot, click on any data point, and whole line will be highlighted in response. The as_shared_tsibble() uses tsibble’s key variables to achieve these types of linking.\nThe approach can also accommodate temporal data of nesting and crossing structures. These time series are referred to as hierarchical and grouped time series in the literature (Hyndman and Athanasopoulos 2017). The aus_retail above is an example of grouped time series. Each series in the data corresponds to all possible combinations of the State and Industry variables, which means they are intrinsically crossed with each other. When one key variable is nested within another, such as regional areas within a state, this is considered to be a hierarchical structure.\nThe spec argument in as_shared_tsibble() provides a means to construct hybrid linking, that incorporates hierarchical and categorical linking. A symbolic formula can be passed to the spec argument, to define the crossing and/or nesting relationships among the key variables. Adopting Wilkinson and Rogers (1973)’s notation for factorial models, the spec follows the / and * operator conventions to declare nesting and crossing variables, respectively. The spec for the aus_retail data is therefore specified as State * Industry or Industry * State, which is the default for the presence of multiple key variables. If there is a hierarchy in the data, using / is required to indicate the parent-child relation, for a strictly one directional parent/child.\nTo illustrate nesting and crossing we use the tourism_monthly dataset (Tourism Research Australia 2020) packaged in tsibbletalk. It contains monthly domestic overnight trips across Australia. The key is comprised of three identifying variables: State, Region, and Purpose (of trip), in particular State nesting of Region, together crossed with Purpose. This specification can be translated as follows:\n\n\nlibrary(tsibble)\nlibrary(tsibbletalk)\ntourism_shared <- tourism_monthly %>%\n  as_shared_tsibble(spec = (State / Region) * Purpose)\n\n\n\n\n\n\nFigure 2: Snapshot of exploring an ensemble of linked plots of the Australian tourism data, built on a  object. It also illustrates persistent linked brushing to compare two groups.\n\n\n\nThere is a three-level hierarchy: the root node is implicitly Australia, and geographically disaggregated to states and lower-level tourism regions. A new handy function plotly_key_tree() has been implemented to help explore the hierarchy. It interprets hierarchies in the shared tsibble’s spec as a tree view, built with plotly. The following code line produces the linked tree diagram (left panel of Figure ). The visual for the tree hierarchy detangles a group of related series and provides a bird’s eye view of the data organisation.\n\n\np_l <- plotly_key_tree(tourism_shared, height = 1100, width = 800)\n\n\n\nThe tree plot provides the graphics skeleton, upon which the rest of data plots can be attached. In this example, small multiples of line plots are placed at the top right of Figure  to explore the temporal trend across regions, by trip purpose. The shared tsibble data can be directly piped into ggplot2 code to create this.\n\n\nlibrary(ggplot2)\np_tr <- tourism_shared %>%\n  ggplot(aes(x = Month, y = Trips)) +\n  geom_line(aes(group = Region), alpha = .5, size = .4) +\n  facet_wrap(~ Purpose, scales = \"free_y\") +\n  scale_x_yearmonth(date_breaks = \"5 years\", date_labels = \"%Y\")\n\n\n\nThese line plots are heavily overplotted. To tease apart structure in the multiple time series, the features() function computes interesting characteristics, including the measures of trend and seasonality. These are displayed in the scatterplot at bottom right, where one dot represents one series.\n\n\nlibrary(feasts)\ntourism_feat <- tourism_shared %>%\n  features(Trips, feat_stl)\np_br <- tourism_feat %>%\n  ggplot(aes(x = trend_strength, y = seasonal_strength_year)) +\n  geom_point(aes(group = Region), alpha = .8, size = 2)\n\n\n\nThere is one final step, to compose the three plots into an ensemble of coordinated views for exploration, shown in Figure . (This is the interactive realisation of Figure ). \n\n\nlibrary(plotly)\nsubplot(p_l,\n  subplot(\n    ggplotly(p_tr, tooltip = \"Region\", width = 1100),\n    ggplotly(p_br, tooltip = \"Region\", width = 1100),\n    nrows = 2),\n  widths = c(.4, .6)) %>%\n  plotly::highlight(dynamic = TRUE)\n\n\n\nSince all plots are created from one shared tsibble data source, they are self-linking views. Nodes, lines, and points are hoverable and clickable. Given the spec, clicking either one element in any plot highlights all points that match the Region category, that is, categorical linking. Figure  is a static view of an interactive exploration. The steps in getting to this point were:\nA branch of the tree corresponding to Western Australia was first selected. (The names of the regions are a little odd, which is a quirk of the data set, but all four areas, Australia’s South West, …., correspond to tourist destinations in Western Australia. Hovering over the node on the branch brings up the state name.) This generated the response in the line plots and the scatterplot that coloured corresponding time series and points as blue.\nTo enable persistent selection, in oder to compare regions or states, “Shift” and click on the tree was done, after switching the colour to red. This generated the response that points and time series corresponding to Sydney were highlighted in red.\nHovering over the points brings up the label for Sydney.\nThe domestic tourism sees Sydney as one of the most popular destinations in realm of business and friends visiting over the years. Despite the relatively weaker performance in Western Australia, Australia’s North West region sees a strongest upward trend in Business, bypassing Sydney in some years.\nIn summary, shared tsibble data nicely bridges between the crosstalk and tidyverts ecosystems for temporal data using the common “key.” The as_shared_tsibble() provides a symbolic user interface for effortless construction of a hybrid of hierarchical and categorical linking between plots. The plotly_key_tree() function, in turn, decodes the hierarchical specification to plot a tree for data overview and navigation, when accompanied by more detailed plots.\nSlicing and dicing time\nAn important aspect of temporal data is the time context. Time has cyclical structure, that may correspond to seasonal patterns to be discovered. The index component of the (shared) tsibble data forms the basis for exploring seasonality. To investigate for periodic or aperiodic patterns, series should be wrapped on themselves, where the index is broken into temporal components like quarter or day. We shall explore this with pedestrian traffic in Melbourne, Australia.\n\n\n\nFigure 3: Snapshots wrapping after slicing the  data at different intervals, (a) none, (b) daily and (c) weekly. This type of interaction is made possible with Shiny elements.\n\n\n\nThe city of Melbourne has sensors installed at various locations, to record hourly counts of pedestrians, in order to capture daily rhythms of the downtown (City of Melbourne 2020). Figure  shows the first five months of 2020 foot traffic at four different locations, for three different time slices, daily, weekly and full five months. Plot  shows hourly counts from January to May on an absolute time line, facetted by locations. The stage 3 COVID-19 lockdown, on March 16, is marked by a change of colour. (The pre-lockdown period is coloured with dark green and lockdown with orange.) We can see a significant decline in foot traffic at all four locations. QV Market is less affected probably because this is a major produce market, an essential service that continued to operate. Bourke St, a major shopping center, sees a gradual uptick in the last weeks of the period indicating that people were getting back into the shops.\nFigure  and  show slicing and wrapping of the series into daily and weekly sections, respectively. Multiple seasonalities pop out. There tends to be a daily pattern, especially visible at the main train station, Southern Cross Station. There is also a weekday vs weekend pattern, also most visible at Southern Cross Station. These seasonal patterns are still present during the lockdown, but the magnitude is greatly reduced. Numbers are also down at the produce market and the shopping center. Birrarung Marr is the most affected. This is the location of special events, and it is clear that these have completely disappeared during lockdown.\nThe wrapping procedure involves slicing the time index into seasonal periods of interest, and the result is diced time. For example, hourly pedestrian data can be decomposed into 24-hour blocks, which then overlays the counts for all respective days, as done in plot . For exploration, this slice position should be controlled interactively, so that many different slices can be examined rapidly. This can be achieved using shiny, with the functions provided in the tsibbletalk.\nThis shiny module, decoupled to tsibbleWrapUI() and tsibbleWrapServer(), presents a clean interface and forms a reusable component that could be embedded in any shiny application. In general, a shiny module provides a vehicle for modularising shiny applications, relevant for both users and developers. As with all shiny modules, the first argument in both functions in tsibbletalk requires a user-supplied id string that must be unique. The UI function tsibbleWrapUI() simply shows a slider that animates or controls the number of periods to be diced. The workhorse is the server function tsibbleWrapServer(), encapsulating the algorithm that transforms data and sends messages to update the plot accordingly. The plot argument expects a ggplot or plotly object, where one can plot data using either lines or other graphical elements (such as boxplots). As the function name suggests, a (shared) tsibble is needed to start the engine, so that the time index can be retrieved for dissection. The period option semantically takes a desired number of seasonal periods to be shifted, for example data shifted by “1 day,” “2 days,” or “1 week,” etc. In other words, the period defines the grind level. For date-times (represented by POSIXt), the granularity ranges from fine “day” to a much coarser “year.” The following code snippet generates Figure . The creation of the pedestrian20 data is available in supplementary R files.\n\n\n\n\n\nlibrary(shiny)\np_line <- pedestrian20 %>%\n  ggplot(aes(x = Date_Time, y = Count, colour = Lockdown)) +\n  geom_line(size = .3) +\n  facet_wrap(~ Sensor, scales = \"free_y\") +\n  labs(x = \"Date Time\") +\n  scale_colour_brewer(palette = \"Dark2\") +\n  theme(legend.position = \"none\")\n\nui <- fluidPage(\n  tsibbleWrapUI(\"dice\")\n)\nserver <- function(input, output, session) {\n  tsibbleWrapServer(\"dice\", ggplotly(p_line, height = 700), period = \"1 day\")\n}\nshinyApp(ui, server)\n\n\n\nFigure  corresponds to the initial state, with the slider incremented by 1-day units. The “play” button near the end of slider can automatically animate the slicing and dicing process, walking the viewer through all 24 hours of the 152 days. Alternatively, users can drag the slider to examine selected slices.\nIn response to the slider input, the plot will be updated and loaded with newly transformed data. At its core, keeping the application as performant as possible is the top priority. Without completely redrawing the plot, the plotlyProxy() react method is invoked internally for talking to shiny. The underlying tsibble data is being called back and processed in R. Only transformed data gets fed back to the shiny server, for updating with resetting the x-axis ranges and breaks. The other plot configurations, such as marks, y-axes, and layouts, are cached and used as is.\nThe new shiny module exploits the temporal aspect for a tsibble object, available through the index attribute. It allows users to slide through relative periods to digest seasonal behaviours, with nimble user experience.\nSummary\nAt the heart of the tsibbletalk package is a blending of the best bits from tsibble, crosstalk, plotly, and shiny.\nThe as_shared_tsibble() turns a tsibble object to a shared data class, with an option to express any nesting and crossing structures from the key attribute. If nesting is found in the data, the plotly_key_tree() creates an interactive hierarchical tree to help with data overview. This sets the stage for hierarchical and categorical linking between multiple views from one shared tsibble.\nA new shiny module, tsibbleWrapUI() and tsibbleWrapServer(), provides a lens for looking at temporal aspects of a tsibble, in particular seasonal or cyclical variations. The slicing and dicing technique efficiently wrap time lines for user-defined plots. The plotlyProxy() react method makes it possible to send wrapped data to the server and amend the plot straight way.\n\n\n\n\n\n\nChang, Winston, Joe Cheng, JJ Allaire, Yihui Xie, and Jonathan McPherson. 2020. Shiny: Web Application Framework for r. https://CRAN.R-project.org/package=shiny.\n\n\nCheng, Joe. 2020. Crosstalk: Inter-Widget Interactivity for HTML Widgets. https://CRAN.R-project.org/package=crosstalk.\n\n\nCheng, Joe, Bhaskar Karambelkar, and Yihui Xie. 2019. Leaflet: Create Interactive Web Maps with the JavaScript ’Leaflet’ Library. https://CRAN.R-project.org/package=leaflet.\n\n\nCheng, Xiaoyue, Dianne Cook, and Heike Hofmann. 2016. “Enabling Interactivity on Displays of Multivariate Time Series and Longitudinal Data.” Journal of Computational and Graphical Statistics 25 (4): 1057–76. https://www.tandfonline.com/doi/full/10.1080/10618600.2015.1105749.\n\n\nCity of Melbourne. 2020. Pedestrian Volume in Melbourne. City of Melbourne, Australia. http://www.pedestrian.melbourne.vic.gov.au.\n\n\nHafen, Ryan, and Continuum Analytics, Inc. 2020. Rbokeh: R Interface for Bokeh. https://CRAN.R-project.org/package=rbokeh.\n\n\nHyndman, Rob J, and George Athanasopoulos. 2017. Forecasting: Principles and Practice. Melbourne, Australia: OTexts. OTexts.org/fpp2.\n\n\nO’Hara-Wild, Mitchell, Rob Hyndman, and Earo Wang. 2020a. Fable: Forecasting Models for Tidy Time Series. https://CRAN.R-project.org/package=fable.\n\n\n———. 2020b. Feasts: Feature Extraction and Statistics for Time Series. https://CRAN.R-project.org/package=feasts.\n\n\n———. 2020c. Tsibbledata: Diverse Datasets for ’Tsibble’. https://CRAN.R-project.org/package=tsibbledata.\n\n\nSievert, Carson. 2020. Interactive Web-Based Data Visualization with r, Plotly, and Shiny. Chapman; Hall/CRC. https://plotly-r.com.\n\n\nTourism Research Australia. 2020. Australian Domestic Overnight Trips. Tourism Research Australia, Australia. https://www.tra.gov.au.\n\n\nUnwin, Antony, and Pedro Valero-Mora. 2018. “Ensemble Graphics.” Journal of Computational and Graphical Statistics 27 (1): 157–65. https://www.tandfonline.com/doi/full/10.1080/10618600.2017.1383264.\n\n\nVaidyanathan, Ramnath, Yihui Xie, JJ Allaire, Joe Cheng, and Kenton Russell. 2019. Htmlwidgets: HTML Widgets for r. https://CRAN.R-project.org/package=htmlwidgets.\n\n\nWaddell, Adrian, and R. Wayne Oldford. 2020. Loon: Interactive Statistical Data Visualization. https://CRAN.R-project.org/package=loon.\n\n\nWang, Earo, Dianne Cook, and Rob J Hyndman. 2020. “A New Tidy Data Structure to Support Exploration and Modeling of Temporal Data.” Journal of Computational and Graphical Statistics 29 (3): 466–78. https://doi.org/10.1080/10618600.2019.1695624.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10): 1–23.\n\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the Tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686.\n\n\nWilkinson, G. N., and C. E. Rogers. 1973. “Symbolic Description of Factorial Models for Analysis of Variance.” Journal of the Royal Statistical Society. Series C (Applied Statistics) 22 (3): 392–99. http://www.jstor.org/stable/2346786.\n\n\nXie, Yihui, Heike Hofmann, and Xiaoyue Cheng. 2014. “Reactive Programming for Interactive Graphics.” Statistical Science 29 (2): 201–13. http://projecteuclid.org/euclid.ss/1408368571.\n\n\n\n\n",
    "preview": "articles/2020-171/distill-preview.png",
    "last_modified": "2021-06-09T12:01:43+10:00",
    "input_file": "tsibbletalk.knit.md",
    "preview_width": 1248,
    "preview_height": 1152
  },
  {
    "path": "articles/RJ-2020-027/",
    "title": "spinifex: An R Package for Creating a Manual Tour of Low-dimensional Projections of Multivariate Data",
    "description": "Dynamic low-dimensional linear projections of multivariate\ndata collectively known as tours provide an important tool for exploring\nmultivariate data and models. The R package tourr provides functions\nfor several types of tours: grand, guided, little, local and frozen. Each of\nthese can be viewed dynamically, or saved into a data object for\nanimation. This paper describes a new package, spinifex, which provides\na manual tour of multivariate data where the projection coefficient of a single\nvariable is controlled. The variable is rotated fully into the projection,\nor completely out of the projection. The resulting sequence of projections\ncan be displayed as an animation, with functions from either the plotly\nor gganimate packages. By varying the coefficient of a single variable, it is\npossible to explore the sensitivity of structure in the projection\nto that variable. This is particularly useful when used with a projection\npursuit guided tour to simplify and understand the solution. The use of the\nmanual tour is applied particle physics data to illustrate the sensitivity\nof structure in a projection to specific variable contributions.",
    "author": [
      {
        "name": "Nicholas Spyrison",
        "url": {}
      },
      {
        "name": "Dianne Cook",
        "url": {}
      }
    ],
    "date": "2019-06-29",
    "categories": [],
    "contents": "\n\n\nd-title h1, d-title p, d-title figure {\n  grid-column: page;\n}\n\n\n  \n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-06-09T11:47:00+10:00",
    "input_file": "RJ-2020-027.knit.md"
  }
]
